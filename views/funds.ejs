<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Funds Management</title>
    <!-- <link rel="stylesheet" href="css/funds.css"> -->
     <!-- <link rel="stylesheet" href="css/funds2.css"> -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
 

    .btn-custom {
    background-color: #007bff;
    color: white;
    border: none; /* Remove border */
    border-radius: 0.25rem; /* Rounded corners */
    padding: 10px 20px; /* Spacing inside button */
    transition: background-color 0.3s, transform 0.2s; /* Smooth transition */
}

.btn-custom:hover {
    background-color: #0056b3; /* Darker blue on hover */
    transform: translateY(-2px); /* Slight lift effect */
}

/* Spinner styles */
.spinner-border {
    display: none; /* Hide spinner by default */
}

.spinner-border.show {
    display: inline-block; /* Show when active */
}

/* Enhanced Tabs Design */
.nav-tabs {
    justify-content: center;
    margin-bottom: 20px;
}

.nav-tabs .nav-link {
    border: 1px solid #007bff;
    color: #007bff;
    border-radius: 0.25rem;
    padding: 10px 15px; /* Added padding for larger click area */
    transition: background-color 0.3s, color 0.3s; /* Smooth transition */
}

.nav-tabs .nav-link:hover {
    background-color: #e7f1ff; /* Light background on hover */
}

.nav-tabs .nav-link.active {
    background-color: #007bff;
    color: white;
}

/* Transaction Table Styling */
.table {
    margin: 20px 0; /* Spacing above and below the table */
}

.table th, .table td {
    text-align: center;
    vertical-align: middle;
    border: 1px solid #dee2e6; /* Light border */
}

.table th {
    background-color: #007bff; /* Header background */
    color: white; /* Header text color */
}

.table td {
    background-color: #f8f9fa; /* Light background for table cells */
}

/* Card Styling */
.card {
    border: 1px solid #007bff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px; /* Spacing below each card */
}

.card-header {
    background-color: #007bff; /* Header background */
    color: white; /* Header text color */
}

/* Hide Funds Forms initially */
#fundsTabContent {
    display: none;
}

/* Additional Styling */
h1, h5 {
    color: #007bff;
}

h1 {
    font-size: 2.5rem; /* Larger size for main headings */
    margin-bottom: 20px; /* Spacing below the heading */
}

h5 {
    font-size: 1.25rem; /* Slightly larger than normal */
}

/* Form Styling */
.form-control {
    border: 1px solid #007bff; /* Blue border for input fields */
    border-radius: 0.25rem; /* Rounded corners */
    padding: 10px; /* Padding inside input fields */
}

.form-control:focus {
    border-color: #0056b3; /* Darker blue on focus */
    box-shadow: 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Shadow effect on focus */
}

/* Alert Messages */
.alert {
    border-radius: 0.25rem; /* Rounded corners for alerts */
    margin-bottom: 20px; /* Spacing below alerts */
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .btn-custom {
        width: 100%; /* Full width on smaller screens */
    }

    .table {
        font-size: 0.9rem; /* Slightly smaller font size */
    }

    h1 {
        font-size: 2rem; /* Smaller heading size on mobile */
    }
}
/* transaction section */
.view-button {
            background-color: #007bff; /* Bootstrap primary color */
            color: white;
        }

        .view-button:hover {
            background-color: #0056b3; /* Darker shade on hover */
            color: white;
        }
        .btn-custom {
            background-color: #007bff; /* Bootstrap primary color */
            color: white;
            transition: background-color 0.3s, transform 0.2s; /* Smooth transition */
        }

        .btn-custom:hover {
            background-color: #0056b3; /* Darker shade on hover */
            color: white;
            transform: scale(1.05); /* Slightly enlarge on hover */
        }

        /* Card styles */
        .account-card {
            transition: box-shadow 0.3s; /* Smooth shadow transition */
        }

        .account-card:hover {
            box-shadow: 0 4px 20px rgba(0, 123, 255, 0.3); /* Hover shadow effect */
        }

        /* Balance display styles */
        .balance-display {
            font-size: 2rem; /* Larger font size for emphasis */
            font-weight: bold; /* Bold font */
        }
        /* Add a red flashing animation to the alert */
.flash-alert {
    background-color: #f8d7da;  /* Light red background */
    color: #721c24; /* Dark red text */
    padding: 20px;
    border-radius: 5px;
    position: relative;
    animation: flash 1.5s infinite alternate; /* Flash animation */
    font-weight: bold;
}

@keyframes flash {
    0% {
        background-color: #f8d7da; /* Light red */
        color: #721c24;
    }
    50% {
        background-color: #f5c6cb; /* Darker red */
        color: #721c24;
    }
    100% {
        background-color: #f8d7da; /* Light red */
        color: #721c24;
    }
}

/* Style for the alert text */
.flash-alert strong {
    font-size: 1.2em;
}

/* Style for the Complete Profile button */
.flash-alert a {
    margin-left: 20px;
    padding: 10px 20px;
    background-color: #f39c12;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
}

.flash-alert a:hover {
    background-color: #e67e22;
}

    </style>
</head>
<body>

<div class="container mt-5">
    <div class="container mt-5">
        <h1 class="mb-4 text-center">My Account</h1>

        <!-- Account Balance Section -->
        <div class="card mb-4 p-4 account-card">
            <div class="d-flex justify-content-center align-items-center">
                <div>
                    <h1>Welcome, <%= user.name %></h1>
                    <p>Trading Balance: <strong class="balance-display" id="balance">â‚¹<%= user.funds %></strong></p>
                </div>
            </div>
        </div>
        <% if (userdata != null) { %>
            <!-- Display Add and Withdraw Funds buttons if user is logged in -->
            <div class="text-center mb-3">
                <button class="btn btn-custom" id="toggleAddFunds">Add Funds</button>
                <button class="btn btn-custom" id="toggleWithdrawFunds">Withdraw Funds</button>
            </div>
        <% } else { %>
            <!-- Display flashing red alert if profile is not completed -->
            <div id="alertMessage" class="alert alert-danger flash-alert">
                <strong>Complete Your Profile to Add/Withdraw Funds.</strong>
                <a href="/userdata" class="btn btn-warning">Complete Profile</a>
                <img src="https://media1.giphy.com/media/l378nQdVg2NK5oyqs/giphy.gif?cid=6c09b952f5z6nt22il4ml9v54ytjwhh1s4srjwqqs6iio3a1&ep=v1_gifs_search&rid=giphy.gif&ct=g" alt="">
            </div>
        <% } %>
        

    <!-- Tabs for Add Funds & Withdraw (Initially Hidden) -->
    <div class="tab-content mt-3" id="fundsTabContent">
        <!-- Add Funds Tab -->
        <div class="tab-pane fade show active" id="addFunds" role="tabpanel" aria-labelledby="add-funds-tab">
            <div class="card p-4">
                <form id="addFundsForm">
                    <div class="mb-3">
                        <label for="addAmount" class="form-label">Enter Amount to Add</label>
                        <input type="number" class="form-control" id="addAmount" placeholder="Enter Amount" required min="1">
                    </div>
                    <div class="mb-3">
                        <label for="paymentMethod" class="form-label">Select Payment Method</label>
                        <select class="form-select" id="paymentMethod" required>
                            <option value="" disabled selected>Select payment method</option>
                            <option value="credit-card">Credit/Debit Card</option>
                            <option value="bank-transfer">Bank Transfer</option>
                            <option value="digital-wallet">Digital Wallet</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-custom w-100">Add Funds</button>
                    <div class="spinner-border text-light" id="addLoading" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </form>
            </div>
        </div>

        <!-- Withdraw Funds Tab -->
        <div class="tab-pane fade" id="withdrawFunds" role="tabpanel" aria-labelledby="withdraw-funds-tab">
            <div class="card p-4">
                <form id="withdrawForm">
                    <div class="mb-3">
                        <label for="withdrawAmount" class="form-label">Enter Amount to Withdraw</label>
                        <input type="number" class="form-control" id="withdrawAmount" placeholder="Enter Amount to Withdraw"  required min="1">
                    </div>
                    <div class="mb-3">
                        <label for="withdrawMethod" class="form-label">Select Withdrawal Method</label>
                        <select class="form-select" id="withdrawMethod" required>
                            <option value="" disabled selected>Select withdrawal method</option>
                            <option value="bank-transfer">Bank Transfer</option>
                            <option value="digital-wallet">Digital Wallet</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-custom w-100">Withdraw Funds</button>
                    <div class="spinner-border text-light" id="withdrawLoading" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="container mt-5">
       
        <h2>Your Transactions</h2>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>Method</th>
                        <th>Date</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% alltransaction.forEach(transaction => { %>
                        <tr>
                            <td><%= transaction.type %></td>
                            <td>â‚¹<%= transaction.amount %></td>
                            <td><%= transaction.method %></td>
                            <td><%= transaction.date.toLocaleDateString() %></td>
                            <td>
                                <a href="/transaction/<%= transaction._id %>" class="btn view-button">View</a>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
    <!-- Transaction History Section -->
    <!-- <div class="card mt-4">
        <h5 class="text-center p-3">Transaction History</h5>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Transaction Type</th>
                    <th>Amount</th>
                    <th>Payment Method</th>
                </tr>
            </thead>
            <tbody id="transactionHistory">
                <!-- Transaction entries will be dynamically added here -->
            </tbody>
        </table>
    </div> -->
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let balance = parseFloat($('#balance').text().replace('â‚¹', '')); // Initially set balance from backend
    let transactions = []; // Array to store transaction history

    // Add Funds
    $('#addFundsForm').on('submit', function(e) {
        e.preventDefault();
        const addAmount = parseFloat($('#addAmount').val());
        const paymentMethod = $('#paymentMethod').val();

        if (addAmount > 0) {
            $('#addLoading').show(); // Show loading spinner
            $.ajax({
                url: '/funds/add', // API for adding funds
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ amount: addAmount }),
                success: function(response) {
                    balance += addAmount;
                    transactions.unshift({
                        date: new Date().toLocaleDateString(),
                        type: 'Deposit',
                        amount: addAmount.toFixed(2),
                        method: paymentMethod
                    });
                    updateBalance();
                    updateTransactionHistory();
                    $('#addFundsForm')[0].reset(); // Clear form fields
                    sendTransactionData('Deposit', addAmount, paymentMethod);
                },
                error: function(xhr) {
                    alert(xhr.responseJSON.message); // Show error message
                },
                complete: function() {
                    $('#addLoading').hide(); // Hide loading spinner
                }
            });
        }
    });

    // Withdraw Funds
    $('#withdrawForm').on('submit', function(e) {
        e.preventDefault();
        const withdrawAmount = parseFloat($('#withdrawAmount').val());
        const withdrawMethod = $('#withdrawMethod').val();

        if (withdrawAmount > 0 && withdrawAmount <= balance) {
            if (confirm(`Are you sure you want to withdraw â‚¹${withdrawAmount.toFixed(2)}?`)) {
                $('#withdrawLoading').show(); // Show loading spinner
                $.ajax({
                    url: '/funds/withdraw', // API for withdrawing funds
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ amount: withdrawAmount }),
                    success: function(response) {
                        balance -= withdrawAmount;
                        transactions.unshift({
                            date: new Date().toLocaleDateString(),
                            type: 'Withdrawal',
                            amount: withdrawAmount.toFixed(2),
                            method: withdrawMethod
                        });
                        updateBalance();
                        updateTransactionHistory();
                        $('#withdrawForm')[0].reset(); // Clear form fields
                        sendTransactionData('Withdrawal', withdrawAmount, withdrawMethod);
                    },
                    error: function(xhr) {
                        alert(xhr.responseJSON.message); // Show error message
                    },
                    complete: function() {
                        $('#withdrawLoading').hide(); // Hide loading spinner
                    }
                });
            }
        } else {
            alert('Insufficient funds or invalid amount.');
        }
    });

    // Toggle Add/Withdraw Sections
    $('#toggleAddFunds').on('click', function() {
        $('#fundsTabContent').show();
        $('#addFunds').addClass('show active');
        $('#withdrawFunds').removeClass('show active');
    });

    $('#toggleWithdrawFunds').on('click', function() {
        $('#fundsTabContent').show();
        $('#withdrawFunds').addClass('show active');
        $('#addFunds').removeClass('show active');
    });

    // Update balance display
    function updateBalance() {
        $('#balance').text(`â‚¹${balance.toFixed(2)}`);
    }

    // Update transaction history
    // Update transaction history
    function updateTransactionHistory() {
        const transactionHistory = $('#transactionHistory');
        transactionHistory.empty(); // Clear previous entries

        transactions.forEach(transaction => {
            transactionHistory.append(`
                <tr>
                    <td>${transaction.date}</td>
                    <td>${transaction.type}</td>
                    <td>â‚¹${transaction.amount}</td>
                    <td>${transaction.method}</td>
                </tr>
            `);
        });
    }

    // Send transaction data to the server for logging
    function sendTransactionData(type, amount, method) {
        $.ajax({
            url: '/transactions/log', // API for logging transaction data
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ type, amount, method }),
            error: function(xhr) {
                console.error('Error logging transaction:', xhr.responseJSON.message);
            }
        });
    }

    // Initial state - hide funds forms
    $(document).ready(function() {
        $('#fundsTabContent').hide(); // Initially hide funds forms
    });
    window.onload = function() {
    const alertMessage = document.getElementById('alertMessage');
    if (!userdata) {
        alertMessage.style.display = 'block';  // Show the alert if user data is not present
    } else {
        alertMessage.style.display = 'none';   // Hide the alert if user data is present
    }
};

</script>
</body>
</html>
